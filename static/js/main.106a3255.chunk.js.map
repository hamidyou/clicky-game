{"version":3,"sources":["components/Header/Header.js","components/Scoreboard/Scoreboard.js","components/Cards/Cards.js","components/Title/Title.js","components/GameOver/GameOver.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","id","reactstrap_es","Component","Scoreboard","props","className","currentScore","highScore","Cards","onClick","selectMovie","alt","src","image","GameOver","game","shuffleArray","array","i","length","j","Math","floor","random","temp","slice","App","state","selected","movies","moviesArray","selectedMovies","_this","includes","setState","concat","restartGame","_this2","this","components_Header_Header","Title_Title","components_Scoreboard_Scoreboard","gte","components_GameOver_GameOver","class","map","movie","components_Cards_Cards","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.106a3255.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Jumbotron } from 'reactstrap'\nimport './Header.css'\n\nclass Header extends Component {\n  render () {\n    return (\n      <div id='heroDiv'>\n        <Jumbotron id='hero' />\n      </div>\n    )\n  }\n}\n\nexport default Header\n","import React from 'react'\nimport './Scoreboard.css'\n\nconst Scoreboard = props => {\n  return (\n    <div className='wrapper bg-dark text-light' >\n      <p id='currentScore'>\n        Your score: {props.currentScore}\n      </p>\n      <p id='highScore'>\n        High score: {props.highScore}\n      </p>\n    </div>\n  )\n}\nexport default Scoreboard\n","import React from 'react'\nimport { Col } from 'reactstrap'\nimport './Cards.css'\n\nconst Cards = props => {\n  return (<div>\n    <Col>\n      <section onClick={() => props.selectMovie(props.id)} id={props.id}>\n        <img alt='' src={props.image} />\n      </section>\n    </Col>\n  </div>\n  )\n}\n\nexport default Cards\n","import React from 'react'\nimport './Title.css'\n\nconst Scoreboard = props => {\n  return (\n    <div className='nav text-light bg-dark' >\n      <h1>Disney Memory</h1>\n    </div>\n  )\n}\nexport default Scoreboard\n","import React from 'react'\n\nconst GameOver = props => {\n  return (\n    <div className='wrapper bg-light text-dark'>\n      <p><strong>You already selected that one.  GAME OVER!</strong></p>\n      <button className='btn btn-success' onClick={props.game}>Click Here to Play Again</button>\n    </div>\n  )\n}\n\nexport default GameOver\n","import React, { Component } from 'react'\nimport './App.css'\nimport Header from './components/Header/Header'\nimport Scoreboard from './components/Scoreboard/Scoreboard'\nimport Cards from './components/Cards/Cards'\nimport moviesArray from './images/images.json'\nimport Title from './components/Title/Title'\nimport GameOver from './components/GameOver/GameOver'\nimport { concat, includes, slice, gte } from 'kyanite/dist/kyanite'\n\nconst shuffleArray = array => {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1))\n    let temp = array[i]\n    array[i] = array[j]\n    array[j] = temp\n  }\n  return slice(0, 12, array)\n}\n\nclass App extends Component {\n\n  state = {\n    selected: [],\n    currentScore: 0,\n    highScore: 0,\n    movies: shuffleArray(moviesArray),\n    game: true\n  }\n\n  selectMovie = id => {\n    const selectedMovies = this.state.selected\n    if (includes(id, selectedMovies)) {\n      this.setState({ game: false })\n    } else {\n      this.setState({\n        currentScore: this.state.currentScore + 1,\n        selected: concat(id, selectedMovies),\n        movies: shuffleArray(moviesArray)\n      })\n    }\n  }\n\n  restartGame = () => {\n    this.setState({\n      game: true,\n      currentScore: 0,\n      highScore: this.state.highScore,\n      movies: shuffleArray(moviesArray)\n    })\n  }\n\n\n  render() {\n    return (\n      <div className='App' >\n        <Header />\n        <Title></Title>\n        {\n          this.state.game ?\n            <Scoreboard\n              currentScore={this.state.currentScore}\n              highScore={gte(this.state.highScore, this.state.currentScore)\n                ? this.state.currentScore\n                : this.state.highScore}\n            />\n            : <GameOver game={this.restartGame} />\n        }\n        <div class='grid'>\n          {this.state.movies.map(movie => (\n            <Cards\n              selectMovie={this.selectMovie}\n              id={movie.id}\n              key={movie.id}\n              image={movie.src}\n            />))}\n        </div>\n\n      </div>\n    )\n  }\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}